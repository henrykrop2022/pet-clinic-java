pipeline {
    agent any
    tools {
        maven 'M2_HOME' //opt/maven
        jdk 'JAVA_HOME'      
    }

    environment {

        AWS_REGION = 'us-east-1'
        AWS_REPO = '180294207776.dkr.ecr.us-east-1.amazonaws.com/jenkins-ci'
        AWS_URL = '180294207776.dkr.ecr.us-east-1.amazonaws.com'
        BRANCH_NAME= 'main'
        GIT_PROJECT_URL = 'https://github.com/henrykrop2022/pet-clinic-java.git'
        GIT_CRED = 'github-accessID'
        SONAQUBE_CRED = 'sonarqube-credentials'
        SCANNER_HOME= tool 'sonar'
        SONAR_URL = 'http://3.90.225.193:9000/'
        SONAQUBE_INSTALLATION = 'sonar'
        APP_NAME = 'pet-clinic-java'
        JFROG_CRED = 'jfrog-cred'
        ARTIFACTPATH = 'target/*.jar'
        ARTIFACTORY_URL = 'http://3.90.225.193:8082/artifactory'
        REPO = 'devops'
        ARTIFACTTARGETPATH = "release_${BUILD_ID}.jar"
    }
    stages {
        stage('Git Checkout'){ // Cloning the code from the repository
            steps{
                git branch: "${BRANCH_NAME}", credentialsId: "${GIT_CRED}", \
                url: "${GIT_PROJECT_URL}"
            }
        }
        stage('CodeScan') {
            steps {
                sh "trivy fs --format table -o maven_dependency.html ."       
            }
        }
        stage('Unit Test'){
            steps{
                sh 'mvn clean'
                sh 'mvn compile'
            }
        }
        stage('SonarQube Scan') {    
                steps {
                  withSonarQubeEnv(credentialsId: "${SONAQUBE_CRED}", \
                installationName: "${SONAQUBE_INSTALLATION}" ) {
              sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=${APP_NAME} -Dsonar.projectKey=${APP_NAME} \
                   -Dsonar.java.binaries=. '''
                }
            }
        }
        stage('Quality Gate Check'){
            steps{
              script{
                 waitForQualityGate abortPipeline: false, credentialsId: "${SONAQUBE_CRED}" 
              }
            }
        }
         stage('Code Package'){
            steps{
                sh 'mvn package -Dcheckstyle.skip=true'
            }
        }
        stage('Upload Jar to Jfrog'){
            steps{
                withCredentials([usernamePassword(credentialsId: "${JFROG_CRED}", \
                 usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                    script {
                        // Define the artifact path and target location
                        //def artifactPath = 'target/*.jar'
                        //def targetPath = "release_${BUILD_ID}.jar"

                        // Upload the artifact using curl
                        sh """
                            curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} \
                                 -T ${ARTIFACTPATH} \
                                 ${ARTIFACTORY_URL}/${REPO}/${ARTIFACTTARGETPATH}
                        """
            }
        }
    }

}


        /*
        stage('CodeLogin') {
            steps {
                sh " aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_URL"
            }
        }
        stage('DockerImageBuild') {
            steps {
                sh ' docker build -t jenkins-ci .'
                sh ' docker build -t imageversion .'
            }
        }
        stage('DockerImageTag') {
            steps {
                sh "docker tag jenkins-ci:latest $AWS_REPO:latest"
                sh "docker tag imageversion $AWS_REPO:v1.$BUILD_NUMBER"
            }
        }
        stage('Docker PushImage to ECR') {
            steps {
               sh "docker push $AWS_REPO:latest"
                sh "docker push $AWS_REPO:v1.$BUILD_NUMBER" 
            }
        }
        */
    }
}